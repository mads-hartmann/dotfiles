[
    {
        // A bit of a hacky way to get backspace to work on a selection as I've been
        // used to in Emacs.
        "key": "backspace",
        "command": "emacs.C-w",
        "when": "editorTextFocus &&Â editorHasSelection && !editorHasMultipleSelections"
    },
    {
        "key": "escape",
        "command": "emacs.exitMarkMode",
        "when": "editorHasSelection && editorTextFocus"
    },
    {
        "key": "alt+tab",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+/",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly"
    },
    // File explorer.
    {
        "key": "tab",
        "command": "list.toggleExpand",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "shift+tab",
        "command": "list.collapse",
        "when": "filesExplorerFocus && !inputFocus"
    },
    {
        "key": "cmd+enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    // Quick open.
    // The default behavior for the Emacs extension was making me insane. The
    // following two bindings makes sure that ctrl+n and ctrl+p simply moves the
    // selection. Previously it would automatically select the item once you
    // stopped holding down ctrl.
    {
        "key": "ctrl+n",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },

    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+t",
        "command": "workbench.action.quickOpen"
    },
    // Uncategorized - for now.
    {
        "key": "cmd+0",
        "command": "workbench.files.action.focusFilesExplorer",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+]",
        "command": "workbench.action.focusNextGroup",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+[",
        "command": "workbench.action.focusPreviousGroup",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+[",
        "command": "workbench.action.previousEditorInGroup",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+]",
        "command": "workbench.action.nextEditorInGroup",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+.",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+x 2",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "ctrl+shift+.",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+l",
        "command": "workbench.action.gotoLine",
        "when": "editorTextFocus"
    },
    // Disable default keybinding, as this is what I'm using to switch windows
    {
        "key": "cmd+\\",
        "command": ""
    },
    {
        "key": "ctrl+shift+,",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+w",
        "command": "expand_region",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "undo_expand_region",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+,",
        "command": "workbench.action.openNextRecentlyUsedEditorInGroup"
    },
    {
        "key": "cmd+r",
        "command": "editor.action.startFindReplaceAction"
    },
    {
        "key": "cmd+d",
        "command": "editor.action.copyLinesDownAction"
    },
    {
        "key": "alt+u",
        "command": "editor.action.transformToUppercase"
    },
    {
        "key": "alt+l",
        "command": "editor.action.transformToLowercase"
    },
    {
        "key": "alt+.",
        "command": "editor.action.goToDeclaration",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "alt+,",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "shift+cmd+l",
        "command": "workbench.files.action.showActiveFileInExplorer",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+n",
        "command": "editor.action.marker.next",
        "when": "editorFocus && !editorReadonly"
    },
    {
        "key": "alt+p",
        "command": "editor.action.marker.prev",
        "when": "editorFocus && !editorReadonly"
    },
    // I use alt+cmd+f for Spectacle.app
    {
        "key": "alt+cmd+f",
        "command": null
    },
    {
        "key": "cmd+shift+f",
        "command": "workbench.view.search"
    },
    {
        "key": "cmd+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "cmd+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "cmd+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "cmd+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "cmd+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "cmd+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "cmd+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "cmd+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "cmd+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "ctrl+shift+alt+.",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorTextFocus"
    }
]
