#+TITLE: Shell
#+SETUPFILE: ../etc/options.org

I use [[http://www.zsh.org/][Zsh]] as my main shell. I use [[https://ohmyz.sh/][Oh My ZSH!]] - abbreviated as /omz/
for the remainder of this document - to leverage all the great work
that's been done by the community and to bring a bit of structure to
my configuration.

I rely heavily on /omzs/ concept of a [[https://github.com/robbyrussell/oh-my-zsh/wiki/Customization#overriding-and-adding-plugins][plugin]]. If I need to configure a
tool, like [[http://computer.localhost/programs/cheat/][cheat]], I'll do so in the form of a plugin named
~config-cheat~.

** Table of contents                                              :TOC_2_ORG:
  - [[Environment][Environment]]
  - [[Tab completion][Tab completion]]
  - [[Plugins][Plugins]]
  - [[Theme][Theme]]
  - [[Keybindings][Keybindings]]
  - [[Aliases][Aliases]]
  - [[Syntax highlighting][Syntax highlighting]]
  - [[Activating Oh My ZSH!][Activating Oh My ZSH!]]

** Environment

This covers everything I have in my ~.zshenv~ file but not all the
environment variables that I've defined. Most of my environment variables
are introduced by the /omz/ plugins I've defined.

I use UTF-8 everywhere.

#+CAPTION: ~~/.zshenv~
#+BEGIN_SRC sh :tangle ../.home/.zshenv
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
#+END_SRC

I have a few environment variables that I would rather not have in my
Git history.

#+CAPTION: ~~/.zshenv~
#+BEGIN_SRC sh :tangle ../.home/.zshenv
[ -f ~/.secrets ] && source ~/.secrets
#+END_SRC

I use Emacs as my default editor. I'm trying to bit a bit clever here
and have it use the already running instance of Emacs.app if it's
available otherwise it falls back to using Emacs in my shell.

#+CAPTION: ~~/.zshenv~
#+BEGIN_SRC sh :tangle ../.home/.zshenv
export EDITOR="emacsclient -c --socket-name server-gui --alternate-editor=emacsclient"
#+END_SRC

Finally, set up the ~$PATH~ so it can find all my programs.

#+CAPTION: ~~/.zshenv~
#+BEGIN_SRC sh :tangle ../.home/.zshenv
# Coming from bash, I expect these to be in the PATH.
export PATH=/usr/local/bin:$HOME/bin:$PATH

# Homebrew somtimes puts things here.
export PATH="/usr/local/sbin:$PATH"

# Make sure that the homebrew installed emacs comes first in the
# shell.
export PATH="/usr/local/opt/emacs/bin:$PATH"

# I mostly use sed in CI scripts so might as well use the version that
# the CI servers are going to use
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
#+END_SRC

*** Background

By default Zsh will evaluate ~.zshenv~ on all invocations of the
shell unless the ~-f~ option is set. It should contain commands to set
the command search path along with other important environment variables.
~.zshenv~ should not contain commands that produce output or assume
the shell is attached to a tty.

** Tab completion

The Zsh community maintains a collection of completion scripts [[https://github.com/zsh-users/zsh-completions][here]]
that can be installed through /homebrew/.

#+BEGIN_SRC sh
brew install zsh-completions
#+END_SRC

To make sure that Zsh can find them I add them to the [[http://zsh.sourceforge.net/Doc/Release/Functions.html][fpath]].

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
fpath=(/usr/local/share/zsh-completions $fpath)
#+END_SRC

** Plugins

I use a lot of the [[https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins][built-in plugins]] that come with /omz/.

#+CAPTION: ~~/.zshrc~
#+begin_src sh :tangle ../.home/.zshrc
plugins+=(
  git
  hub
  aws
  npm
  docker
  zsh_reload # provides a src function to reload .zshrc
)
#+end_src

As mentioned I have a convention of using ~config-program~ plugins
to configure my use of a specific program.

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
plugins+=(
  config-cheat
  config-docker
  config-fzf
  config-opam
  config-go
  config-php
  config-dive
)
#+END_SRC

And finally I have a few of my own plugins that I've written over the
years.

  + [[http://computer.localhost/zsh/plugins/aws-switch/][aws-switch]]
  + [[http://computer.localhost/zsh/plugins/danger-danger/][danger-danger]]
  + [[http://computer.localhost/zsh/plugins/git-fzf/][git-fzf]]
  + [[http://computer.localhost/zsh/plugins/git-pr/][git-pr]]
  + [[http://computer.localhost/zsh/plugins/reload-function/][reload-function]]
  + [[http://computer.localhost/zsh/plugins/iterm-theme/][iterm-theme]]
  + [[http://computer.localhost/zsh/plugins/switch-project/][switch-project]]

I want to load those as well.

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
plugins+=(
  aws-switch
  danger-danger
  git-fzf
  git-pr
  iterm-theme
  reload-function
  switch-project
)
#+END_SRC

** Theme

I've stitched together my own theme, named [[http://computer.localhost/zsh/themes/hartmann][hartmann]], over the years by
copy-pasting from various other themes. To let /omz/ know that that's
the theme I want to use I set the ~ZSH_THEME~ environment variable.

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
export ZSH_THEME="hartmann"
#+END_SRC

** Keybindings

I have a few general keybindings defined here, the rest are defined in
the relevant ~config-~ plugins.

#+CAPTION: ~cat ~/.zsh/keybindings.zsh~
#+BEGIN_SRC sh :tangle ../.home/.zsh/keybindings.zsh
bindkey '^[l' down-case-word
bindkey '^[u' up-case-word
bindkey -s '^[s' '^Ugit-switch^M'
bindkey -s '^[e' '^Uedit^M'
#+END_SRC

*** Background

When you're using Zsh in your terminal you're interfacing with the [[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html][Zsh
line editor (ZLE)]]. The ZLE has support for keymaps and you can add
your own entries (See [[http://sgeb.io/posts/2014/04/zsh-zle-custom-widgets/][this]] and [[http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets][this]] page for more information).

Here's some debug information:

  + To get a list of all widgets run ~zle -la~.
  + You can use ~bindkey M-x~ to see what command ~M-x~ is bound to.
    Use ~bindkey~ to get a list of all mappings.
  + ~^~ is control, ~^[~ is alt.

The structure looks like this:

#+BEGIN_SRC
bindkey <keys> <widget>
bindkey -s <keys> <input strokes>
#+END_SRC

** Aliases

I have a few global aliases that I use. Otherwise the aliases are defined in
the relevant ~config-~ plugins.

#+CAPTION: ~cat ~/.zsh/aliases.zsh~
#+BEGIN_SRC sh :tangle ../.home/.zsh/aliases.zsh
alias reload=src
alias e=edit
alias epoch="date +%s | tr -d '\n'"
alias gti=git # DWIM version of git.
#+END_SRC

*** Background

To get a list of all the defined aliases together with their
definition you can run the following snippet in your shell.

#+BEGIN_SRC sh
for key in ${(k)aliases}; do
  print -r "${key} = ${aliases[$key]}";
done
#+END_SRC

~aliases~ is an associative array that Zsh maintains to keep track of
all the aliases. ~(k)aliases~ extracts all the keys of the associative
array.

** Syntax highlighting

The [[https://github.com/zsh-users/zsh-syntax-highlighting][zsh-syntax-highlighting]] project provides Fish shell like syntax
highlighting for Zsh. I install it through Homebrew.

#+BEGIN_SRC sh
brew install zsh-syntax-highlighting
#+END_SRC

And load it if it exists

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
if [[ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi
#+END_SRC

I like quite a lot of highlighting. See the full list of highlighters
[[https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md][here]].

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshenv
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
#+END_SRC

** Activating Oh My ZSH!

I have to load Oh My ZSH! last as it's configured through various
environment variables and Zsh variables.

It needs to know where I've installed it. I just use the default
location.

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
export ZSH=$HOME/.oh-my-zsh
#+END_SRC

Set the ~ZSH_CUSTOM~ environment variable to tell it where to look for
custom plugins, themes etc.

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
export ZSH_CUSTOM=$HOME/.zsh
#+END_SRC

Finally I load /Oh My ZSH!/

#+CAPTION: ~~/.zshrc~
#+BEGIN_SRC sh :tangle ../.home/.zshrc
source $ZSH/oh-my-zsh.sh
#+END_SRC
